/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by lcm-gen
 **/

#include <lcm/lcm_coretypes.h>

#ifndef __sym_optimization_stats_t_hpp__
#define __sym_optimization_stats_t_hpp__

#include <vector>
#include "lcmtypes/sym/optimization_iteration_t.hpp"

namespace sym
{

/// Debug stats for a full optimization run
class optimization_stats_t
{
    public:
        std::vector< ::sym::optimization_iteration_t > iterations;

        // Index into iterations of the best iteration (containing the optimal Values)
        int32_t best_index;

        // Did the optimization early exit? (either because it converged, or because it could not find a
        // good step)
        int8_t early_exited;

    public:
        optimization_stats_t() = default;

        /**
         * Member constructor
         */
        inline optimization_stats_t(
            const std::vector< ::sym::optimization_iteration_t >& iterations_arg,
            const int32_t& best_index_arg,
            const int8_t& early_exited_arg
        );

        /**
         * Encode a message into binary form.
         *
         * @param buf The output buffer.
         * @param offset Encoding starts at thie byte offset into @p buf.
         * @param maxlen Maximum number of bytes to write.  This should generally be
         *  equal to getEncodedSize().
         * @return The number of bytes encoded, or <0 on error.
         */
        inline int encode(void *buf, int offset, int maxlen) const;

        /**
         * Check how many bytes are required to encode this message.
         */
        inline int getEncodedSize() const;

        /**
         * Decode a message from binary form into this instance.
         *
         * @param buf The buffer containing the encoded message.
         * @param offset The byte offset into @p buf where the encoded message starts.
         * @param maxlen The maximum number of bytes to read while decoding.
         * @return The number of bytes decoded, or <0 if an error occured.
         */
        inline int decode(const void *buf, int offset, int maxlen);

        /**
         * Retrieve the 64-bit fingerprint identifying the structure of the message.
         * Note that the fingerprint is the same for all instances of the same
         * message type, and is a fingerprint on the message type definition, not on
         * the message contents.
         */
        inline static int64_t getHash();

        using type_name_array_t = const char[21];

        inline static constexpr type_name_array_t* getTypeNameArrayPtr();

        /**
         * Returns "optimization_stats_t"
         */
        inline static constexpr const char* getTypeName();

        /**
         * Returns "sym"
         */
        inline static const char * getPackageName();

        // LCM support functions. Users should not call these
        inline int _encodeNoHash(void *buf, int offset, int maxlen) const;
        inline int _getEncodedSizeNoHash() const;
        inline int _decodeNoHash(const void *buf, int offset, int maxlen);
#if !defined(SKYDIO_DISABLE_LCM_NO_INLINE)
        __attribute__((noinline))
#endif
        inline static uint64_t _computeHash(const __lcm_hash_ptr *p);

        // Comparison operators.
        inline bool operator==(const optimization_stats_t& other) const;
        inline bool operator!=(const optimization_stats_t& other) const;
};

optimization_stats_t::optimization_stats_t(
    const std::vector< ::sym::optimization_iteration_t >& iterations_arg,
    const int32_t& best_index_arg,
    const int8_t& early_exited_arg
) : iterations(iterations_arg),
    best_index(best_index_arg),
    early_exited(early_exited_arg) {}

int optimization_stats_t::encode(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;
    int64_t hash = (int64_t)getHash();

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
    if (tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int optimization_stats_t::decode(const void *buf, int offset, int maxlen)
{
    int pos = 0, thislen;

    int64_t msg_hash;
    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
    if (thislen < 0) return thislen; else pos += thislen;
    if (msg_hash != getHash()) return -1;

    thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

int optimization_stats_t::getEncodedSize() const
{
    return 8 + _getEncodedSizeNoHash();
}

int64_t optimization_stats_t::getHash()
{
    static int64_t hash = _computeHash(NULL);
    return hash;
}

constexpr optimization_stats_t::type_name_array_t* optimization_stats_t::getTypeNameArrayPtr() {
    return &"optimization_stats_t";
}

constexpr const char* optimization_stats_t::getTypeName()
{
    return *optimization_stats_t::getTypeNameArrayPtr();
}

const char * optimization_stats_t::getPackageName()
{
    return "sym";
}

int optimization_stats_t::_encodeNoHash(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;

    int32_t v_num_iterations = this->iterations.size();
    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &v_num_iterations, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < v_num_iterations; a0++) {
        tlen = this->iterations[a0]._encodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->best_index, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __boolean_encode_array(buf, offset + pos, maxlen - pos, &this->early_exited, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int optimization_stats_t::_decodeNoHash(const void *buf, int offset, int maxlen)
{
    int pos = 0, tlen;

    int32_t v_num_iterations;
    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &v_num_iterations, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    this->iterations.resize(v_num_iterations);
    for (int a0 = 0; a0 < v_num_iterations; a0++) {
        tlen = this->iterations[a0]._decodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->best_index, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __boolean_decode_array(buf, offset + pos, maxlen - pos, &this->early_exited, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int optimization_stats_t::_getEncodedSizeNoHash() const
{
    int enc_size = 0;
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    for (int a0 = 0; a0 < this->iterations.size(); a0++) {
        enc_size += this->iterations[a0]._getEncodedSizeNoHash();
    }
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __boolean_encoded_array_size(NULL, 1);
    return enc_size;
}

#if !defined(SKYDIO_DISABLE_LCM_NO_INLINE)
__attribute__((noinline))
#endif
uint64_t optimization_stats_t::_computeHash(const __lcm_hash_ptr *p)
{
    const __lcm_hash_ptr *fp;
    for(fp = p; fp != NULL; fp = fp->parent)
        if(fp->v == optimization_stats_t::getHash)
            return 0;
    const __lcm_hash_ptr cp = { p, optimization_stats_t::getHash };

    uint64_t hash = 0x68a1e7b16147ee0aLL +
         ::sym::optimization_iteration_t::_computeHash(&cp);

    return (hash<<1) + ((hash>>63)&1);
}

bool optimization_stats_t::operator==(const optimization_stats_t& other) const {
  return (
          (iterations==other.iterations) && 
          (best_index==other.best_index) && 
          (early_exited==other.early_exited));
}

bool optimization_stats_t::operator!=(const optimization_stats_t& other) const {
  return !(*this==other);
}

}

#endif
/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by lcm-gen
 **/

#include <lcm/lcm_coretypes.h>

#ifndef __sym_optimizer_gnc_params_t_hpp__
#define __sym_optimizer_gnc_params_t_hpp__


namespace sym
{

/// Additional parameters for the GNCOptimizer
class optimizer_gnc_params_t
{
    public:
        // The convexity param is stepped each time we early-exit with this threshold.
        float gnc_update_min_reduction;

        // Initial mu value.
        float mu_initial;

        // Amount to change mu each step.
        float mu_step;

        // Maximum mu value.
        float mu_max;

    public:
        optimizer_gnc_params_t() = default;

        /**
         * Member constructor
         */
        inline optimizer_gnc_params_t(
            const float& gnc_update_min_reduction_arg,
            const float& mu_initial_arg,
            const float& mu_step_arg,
            const float& mu_max_arg
        );

        /**
         * Encode a message into binary form.
         *
         * @param buf The output buffer.
         * @param offset Encoding starts at thie byte offset into @p buf.
         * @param maxlen Maximum number of bytes to write.  This should generally be
         *  equal to getEncodedSize().
         * @return The number of bytes encoded, or <0 on error.
         */
        inline int encode(void *buf, int offset, int maxlen) const;

        /**
         * Check how many bytes are required to encode this message.
         */
        inline int getEncodedSize() const;

        /**
         * Decode a message from binary form into this instance.
         *
         * @param buf The buffer containing the encoded message.
         * @param offset The byte offset into @p buf where the encoded message starts.
         * @param maxlen The maximum number of bytes to read while decoding.
         * @return The number of bytes decoded, or <0 if an error occured.
         */
        inline int decode(const void *buf, int offset, int maxlen);

        /**
         * Retrieve the 64-bit fingerprint identifying the structure of the message.
         * Note that the fingerprint is the same for all instances of the same
         * message type, and is a fingerprint on the message type definition, not on
         * the message contents.
         */
        constexpr static int64_t getHash();

        using type_name_array_t = const char[23];

        inline static constexpr type_name_array_t* getTypeNameArrayPtr();

        /**
         * Returns "optimizer_gnc_params_t"
         */
        inline static constexpr const char* getTypeName();

        /**
         * Returns "sym"
         */
        inline static const char * getPackageName();

        // LCM support functions. Users should not call these
        inline int _encodeNoHash(void *buf, int offset, int maxlen) const;
        inline int _getEncodedSizeNoHash() const;
        inline int _decodeNoHash(const void *buf, int offset, int maxlen);
        constexpr static uint64_t _computeHash(const __lcm_hash_ptr *p);

        // Comparison operators.
        inline bool operator==(const optimizer_gnc_params_t& other) const;
        inline bool operator!=(const optimizer_gnc_params_t& other) const;
};

optimizer_gnc_params_t::optimizer_gnc_params_t(
    const float& gnc_update_min_reduction_arg,
    const float& mu_initial_arg,
    const float& mu_step_arg,
    const float& mu_max_arg
) : gnc_update_min_reduction(gnc_update_min_reduction_arg),
    mu_initial(mu_initial_arg),
    mu_step(mu_step_arg),
    mu_max(mu_max_arg) {}

int optimizer_gnc_params_t::encode(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;
    int64_t hash = (int64_t)getHash();

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
    if (tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int optimizer_gnc_params_t::decode(const void *buf, int offset, int maxlen)
{
    int pos = 0, thislen;

    int64_t msg_hash;
    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
    if (thislen < 0) return thislen; else pos += thislen;
    if (msg_hash != getHash()) return -1;

    thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

int optimizer_gnc_params_t::getEncodedSize() const
{
    return 8 + _getEncodedSizeNoHash();
}

constexpr int64_t optimizer_gnc_params_t::getHash()
{
    return _computeHash(NULL);
}

constexpr optimizer_gnc_params_t::type_name_array_t* optimizer_gnc_params_t::getTypeNameArrayPtr() {
    return &"optimizer_gnc_params_t";
}

constexpr const char* optimizer_gnc_params_t::getTypeName()
{
    return *optimizer_gnc_params_t::getTypeNameArrayPtr();
}

const char * optimizer_gnc_params_t::getPackageName()
{
    return "sym";
}

int optimizer_gnc_params_t::_encodeNoHash(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->gnc_update_min_reduction, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->mu_initial, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->mu_step, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->mu_max, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int optimizer_gnc_params_t::_decodeNoHash(const void *buf, int offset, int maxlen)
{
    int pos = 0, tlen;

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->gnc_update_min_reduction, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->mu_initial, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->mu_step, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->mu_max, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int optimizer_gnc_params_t::_getEncodedSizeNoHash() const
{
    int enc_size = 0;
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    return enc_size;
}

constexpr uint64_t optimizer_gnc_params_t::_computeHash(const __lcm_hash_ptr *)
{
    uint64_t hash = 0xdd7ac94886a02102LL;
    return (hash<<1) + ((hash>>63)&1);
}

bool optimizer_gnc_params_t::operator==(const optimizer_gnc_params_t& other) const {
  return (
          (gnc_update_min_reduction==other.gnc_update_min_reduction) && 
          (mu_initial==other.mu_initial) && 
          (mu_step==other.mu_step) && 
          (mu_max==other.mu_max));
}

bool optimizer_gnc_params_t::operator!=(const optimizer_gnc_params_t& other) const {
  return !(*this==other);
}

}

#endif
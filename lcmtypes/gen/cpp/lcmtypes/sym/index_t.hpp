/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by lcm-gen
 **/

#include <lcm/lcm_coretypes.h>

#ifndef __sym_index_t_hpp__
#define __sym_index_t_hpp__

#include <vector>
#include "lcmtypes/sym/index_entry_t.hpp"

namespace sym
{

class index_t
{
    public:
        int32_t storage_dim;

        int32_t tangent_dim;

        std::vector< ::sym::index_entry_t > entries;

    public:
        index_t() = default;

        /**
         * Member constructor
         */
        inline index_t(
            const int32_t& storage_dim_arg,
            const int32_t& tangent_dim_arg,
            const std::vector< ::sym::index_entry_t >& entries_arg
        );

        /**
         * Encode a message into binary form.
         *
         * @param buf The output buffer.
         * @param offset Encoding starts at thie byte offset into @p buf.
         * @param maxlen Maximum number of bytes to write.  This should generally be
         *  equal to getEncodedSize().
         * @return The number of bytes encoded, or <0 on error.
         */
        inline int encode(void *buf, int offset, int maxlen) const;

        /**
         * Check how many bytes are required to encode this message.
         */
        inline int getEncodedSize() const;

        /**
         * Decode a message from binary form into this instance.
         *
         * @param buf The buffer containing the encoded message.
         * @param offset The byte offset into @p buf where the encoded message starts.
         * @param maxlen The maximum number of bytes to read while decoding.
         * @return The number of bytes decoded, or <0 if an error occured.
         */
        inline int decode(const void *buf, int offset, int maxlen);

        /**
         * Retrieve the 64-bit fingerprint identifying the structure of the message.
         * Note that the fingerprint is the same for all instances of the same
         * message type, and is a fingerprint on the message type definition, not on
         * the message contents.
         */
        inline static int64_t getHash();

        using type_name_array_t = const char[8];

        inline static constexpr type_name_array_t* getTypeNameArrayPtr();

        /**
         * Returns "index_t"
         */
        inline static constexpr const char* getTypeName();

        /**
         * Returns "sym"
         */
        inline static const char * getPackageName();

        // LCM support functions. Users should not call these
        inline int _encodeNoHash(void *buf, int offset, int maxlen) const;
        inline int _getEncodedSizeNoHash() const;
        inline int _decodeNoHash(const void *buf, int offset, int maxlen);
#if !defined(SKYDIO_DISABLE_LCM_NO_INLINE)
        __attribute__((noinline))
#endif
        inline static uint64_t _computeHash(const __lcm_hash_ptr *p);

        // Comparison operators.
        inline bool operator==(const index_t& other) const;
        inline bool operator!=(const index_t& other) const;
};

index_t::index_t(
    const int32_t& storage_dim_arg,
    const int32_t& tangent_dim_arg,
    const std::vector< ::sym::index_entry_t >& entries_arg
) : storage_dim(storage_dim_arg),
    tangent_dim(tangent_dim_arg),
    entries(entries_arg) {}

int index_t::encode(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;
    int64_t hash = (int64_t)getHash();

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
    if (tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int index_t::decode(const void *buf, int offset, int maxlen)
{
    int pos = 0, thislen;

    int64_t msg_hash;
    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
    if (thislen < 0) return thislen; else pos += thislen;
    if (msg_hash != getHash()) return -1;

    thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

int index_t::getEncodedSize() const
{
    return 8 + _getEncodedSizeNoHash();
}

int64_t index_t::getHash()
{
    static int64_t hash = _computeHash(NULL);
    return hash;
}

constexpr index_t::type_name_array_t* index_t::getTypeNameArrayPtr() {
    return &"index_t";
}

constexpr const char* index_t::getTypeName()
{
    return *index_t::getTypeNameArrayPtr();
}

const char * index_t::getPackageName()
{
    return "sym";
}

int index_t::_encodeNoHash(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->storage_dim, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->tangent_dim, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    int32_t v_num_entries = this->entries.size();
    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &v_num_entries, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < v_num_entries; a0++) {
        tlen = this->entries[a0]._encodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    return pos;
}

int index_t::_decodeNoHash(const void *buf, int offset, int maxlen)
{
    int pos = 0, tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->storage_dim, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->tangent_dim, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    int32_t v_num_entries;
    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &v_num_entries, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    this->entries.resize(v_num_entries);
    for (int a0 = 0; a0 < v_num_entries; a0++) {
        tlen = this->entries[a0]._decodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    return pos;
}

int index_t::_getEncodedSizeNoHash() const
{
    int enc_size = 0;
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    for (int a0 = 0; a0 < this->entries.size(); a0++) {
        enc_size += this->entries[a0]._getEncodedSizeNoHash();
    }
    return enc_size;
}

#if !defined(SKYDIO_DISABLE_LCM_NO_INLINE)
__attribute__((noinline))
#endif
uint64_t index_t::_computeHash(const __lcm_hash_ptr *p)
{
    const __lcm_hash_ptr *fp;
    for(fp = p; fp != NULL; fp = fp->parent)
        if(fp->v == index_t::getHash)
            return 0;
    const __lcm_hash_ptr cp = { p, index_t::getHash };

    uint64_t hash = 0xcab1ff73ad10c21eLL +
         ::sym::index_entry_t::_computeHash(&cp);

    return (hash<<1) + ((hash>>63)&1);
}

bool index_t::operator==(const index_t& other) const {
  return (
          (storage_dim==other.storage_dim) && 
          (tangent_dim==other.tangent_dim) && 
          (entries==other.entries));
}

bool index_t::operator!=(const index_t& other) const {
  return !(*this==other);
}

}

#endif